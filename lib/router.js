Router.configure({  layoutTemplate: 'layout',  loadingTemplate: 'loading',  notFoundTemplate: 'notFound',  waitOn: function() {    return [Meteor.subscribe('notifications')]  }});DrinksListController = RouteController.extend({  template: 'drinksList',  increment: 10,  drinksLimit: function() {    return parseInt(this.params.drinksLimit) || this.increment;  },  findOptions: function() {    return {sort: {submitted: -1}, limit: this.drinksLimit()};  },  subscriptions: function() {    this.drinksSub = Meteor.subscribe('drinks', this.findOptions());  },  drinks: function() {    return Drinks.find({}, this.findOptions());  },  data: function() {    var hasMore = this.drinks().count() === this.drinksLimit();    var nextPath = this.route.path({drinksLimit: this.drinksLimit() + this.increment});    return {      drinks: this.drinks(),      ready: this.drinksSub.ready,      nextPath: hasMore ? nextPath : null    };  }});Router.route('/drinks/:_id', {  name: 'drinkPage',  waitOn: function() {    return [    Meteor.subscribe('singleDrink', this.params._id),    Meteor.subscribe('comments', this.params._id)    ];  },  data: function() { return Drinks.findOne(this.params._id); }});Router.route('/drinks/:_id/edit', {  name: 'drinkEdit',  waitOn: function() {    return Meteor.subscribe('singleDrink', this.params._id);  },  data: function() { return Drinks.findOne(this.params._id); }});Router.route('/submit', {name: 'drinkSubmit'});Router.route('/:drinksLimit?', {  name: 'drinksList'});var requireLogin = function() {  if (! Meteor.user()) {    if (Meteor.loggingIn()) {      this.render(this.loadingTemplate);    } else {      this.render('accessDenied');    }  } else {    this.next();  }}Router.onBeforeAction('dataNotFound', {only: 'drinkPage'});Router.onBeforeAction(requireLogin, {only: 'drinkSubmit'});